import React, {useEffect, useState} from "react";
import JsonEditorWithLineNumbers from "./components/JsonEditorWithLineNumbers";
import LoadExampleButton from "./components/LoadExampleButton";
import "./components/JsonEditorWithLineNumbers.css";

function BuildPage() {
    const [input, setInput] = useState("");
    const [spec, setSpec] = useState("");
    const [output, setOutput] = useState("");
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState("");
    const [sessionId, setSessionId] = useState(crypto.randomUUID());
    const [userId, setUserId] = useState("default_user");
    const APP_NAME = "jolt_agent";

    useEffect(() => {
        const getSession = async () => {
            const url = window.location.origin + `/apps/${APP_NAME}/users/${userId}/sessions/${sessionId}`;
            try {
                const response = await fetch(url, {
                    method: "POST",
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    }
                });
                const result = await response.json();
            } catch (error) {
                console.error("Error creating session:", error);
            }
        }

        getSession();
    }, []);

    // Pretty-print JSON if valid, else return original
    const tryFormatJson = (value) => {
        try {
            return JSON.stringify(JSON.parse(value), null, 2);
        } catch {
            return value;
        }
    };

    const handleInputBlur = () => {
        setInput(tryFormatJson(input));
    };

    const handleOutputBlur = () => {
        setOutput(tryFormatJson(output));
    };

    const handleBulidSpec = async () => {
        setLoading(true);
        setError("");
        setSpec("");
        let inputObj, outputObj;
        try {
            inputObj = input ? JSON.parse(input) : {};
        } catch (e) {
            setError("Input is not valid JSON");
            setLoading(false);
            return;
        }
        try {
            outputObj = output ? JSON.parse(output) : {};
        } catch (e) {
            setError("Output is not valid JSON");
            setLoading(false);
            return;
        }
        const text = {input_data: inputObj, output_data: outputObj};
        const body = {
            appName: APP_NAME,
            userId: userId,
            sessionId: sessionId,
            newMessage: {
                parts: [
                    {
                        text: `${JSON.stringify(text)}`
                    }
                ]
            },
            streaming: false
        };
        try {
            const response = await fetch("/run", {
                method: "POST",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(body)
            });
            if (!response.ok) {
                setError("Transformation failed");
                setLoading(false);
                return;
            }
            const data = await response.json();
            setSpec(tryFormatJson(data[0].actions.stateDelta.jolt_specification.spec));
        } catch (e) {
            setError("Network or server error");
        } finally {
            setLoading(false);
        }
    };

    return (
        <div className="w-full max-w-7xl p-8 bg-white rounded-lg shadow-lg mx-auto">
            {/* Banner: warning about AI-generated JOLT spec */}
            <div
                role="status"
                aria-live="polite"
                className="w-full mb-6 p-3 rounded border-l-4 border-yellow-400 bg-yellow-50 text-yellow-800 text-sm"
            >
                The JOLT spec is generated by AI and may contain errors.
            </div>
            <div className="flex flex-col md:flex-row gap-8">
                {/* Input */}
                <div className="flex-1 flex flex-col min-w-0">
                    <label className="mb-2 font-semibold" htmlFor="input">Input</label>
                    <JsonEditorWithLineNumbers
                        id="input"
                        value={input}
                        onChange={e => setInput(e.target.value)}
                        onBlur={handleInputBlur}
                        className="h-96"
                        placeholder="Paste or type JSON input here..."
                    />
                </div>
                {/* Output */}
                <div className="flex-1 flex flex-col items-center min-w-0">
                    <label className="mb-2 font-semibold self-start" htmlFor="output">Output</label>
                    <JsonEditorWithLineNumbers
                        id="output"
                        value={output}
                        onChange={e => setOutput(e.target.value)}
                        className="h-96 w-full"
                        onBlur={handleOutputBlur}
                        placeholder="Paste or type JSON output here..."
                    />
                    <button
                        className="mt-4 px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition disabled:opacity-50"
                        onClick={handleBulidSpec}
                        disabled={loading}
                    >
                        {loading ? "Building Spec..." : "Build Spec"}
                    </button>
                    {error && <div className="mt-2 text-red-600 text-sm">{error}</div>}
                </div>
                {/* Spec */}
                <div className="flex-1 flex flex-col min-w-0">
                    <label className="mb-2 font-semibold" htmlFor="spec">Spec</label>
                    <JsonEditorWithLineNumbers
                        id="spec"
                        value={spec}
                        readOnly
                        className="h-96 bg-gray-100"
                        placeholder="Spec will be generated here..."
                    />
                </div>
            </div>
            {/* Links container */}
            <div className="mt-8 flex flex-row justify-center gap-8">
                <LoadExampleButton
                    label="Load Example Input & Output"
                    files={["/input.json", "/output.json"]}
                    setError={setError}
                    onLoad={(inputText, outputText) => {
                        setInput(inputText);
                        setOutput(outputText);
                    }}
                />
            </div>
        </div>
    );
}

export default BuildPage;
